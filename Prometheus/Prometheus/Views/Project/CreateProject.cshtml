
@model Prometheus.Models.ProjectViewModels

@{
    ViewBag.Title = "Create Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create Project</h2>
@Html.Raw(string.IsNullOrEmpty(ViewBag.CreateError) ? "&nbsp;" : ViewBag.CreateError)
@if (!string.IsNullOrEmpty(ViewBag.CreateError))
{
    ViewBag.CreateError = "";
}

<hr />

@{
    var PMList = new List<Prometheus.Models.ProjectMembers>();
    if (Model != null)
    {
        foreach (var pm in Model.MemberList)
        {
            if (string.Compare(pm.Role, Prometheus.Models.ProjectViewModels.PMROLE) == 0)
            {
                PMList.Add(pm);
            }
        }
    }

    var ENGList = new List<Prometheus.Models.ProjectMembers>();
    if (Model != null)
    {
        foreach (var pm in Model.MemberList)
        {
            if (string.Compare(pm.Role, Prometheus.Models.ProjectViewModels.ENGROLE) == 0)
            {
                ENGList.Add(pm);
            }
        }
    }
}

<script src="../../ckeditor/ckeditor.js"></script>

@using (Html.BeginForm("CreateProject","Project",FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        <ul class="nav nav-pills nav-stacked col-md-2">
            <li class="active"><a href="#tab_a" data-toggle="pill">Base Info<font color="red">*</font></a></li>
            <li><a href="#tab_b" data-toggle="pill">MES Bonding</a></li>
        </ul>

        <div class="tab-content col-md-10">
            <div class="tab-pane active" id="tab_a">

                <div class="form-horizontal">

                    <div class="form-group">
                        <div class="col-md-6">
                            <label class="control-label col-md-2" for="ProjectName">Project</label>
                            <div class="col-md-10">
                                @if (Model != null && !string.IsNullOrEmpty(Model.ProjectName))
                                {
                                    <input class="form-control text-box single-line" value="@Model.ProjectName" data-val="true" data-val-length="The field Project must be a string with a minimum length of 6 and a maximum length of 100." data-val-length-max="100" data-val-length-min="6" data-val-regex="The field should not contain \'" data-val-regex-pattern="^(?!.*&#39;).*$" data-val-required="The Project field is required." id="ProjectName" name="ProjectName" type="text" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" data-val="true" data-val-length="The field Project must be a string with a minimum length of 6 and a maximum length of 100." data-val-length-max="180" data-val-length-min="6" data-val-regex="The field should not contain \'" data-val-regex-pattern="^(?!.*&#39;).*$" data-val-required="The Project field is required." id="ProjectName" name="ProjectName" type="text" value="" />
                                }

                                <span class="field-validation-valid text-danger" data-valmsg-for="ProjectName" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            @*@Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>*@

                            <label class="control-label col-md-2" for="StartDate">StartDate</label>
                            <div class="col-md-10">
                                @if (Model != null && !string.IsNullOrEmpty(Model.StartDate.ToString()))
                                {
                                    <input class="form-control text-box single-line" value="@Model.StartDate.ToString("yyyy-MM-dd")" data-val="true" data-val-date="The field StartDate must be a date." data-val-required="The StartDate field is required." id="StartDate" name="StartDate" type="date" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" data-val="true" data-val-date="The field StartDate must be a date." data-val-required="The StartDate field is required." id="StartDate" name="StartDate" type="date" value="" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="StartDate" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $("#StartDate").datepicker({
                                    changeMonth: true,
                                    changeYear: true,
                                    dateFormat: 'yy-mm-dd'
                                });
                            });
                        </script>
                    </div>

                    <hr />


                    @for (var i = 0; i < 1; i++)
                    {
                     <div class="form-group">
                        <div class="col-md-6">
                            <label class="control-label col-md-2" for="PM@(i*2 + 1)">PM@(i * 2 + 1)</label>
                                <div class="col-md-10" data-toggle="tooltip" data-placement="bottom" title="Exampel: brad@finisar.com:john@finisar.com.....">
                                @if (Model != null && PMList.Count > (i * 2))
                                {
                                    <input class="form-control text-box single-line" value="@(PMList[(i * 2)].Name)"  id="PM@(i * 2 + 1)" name="PM@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" data-val-required="The Field is required" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="PM@(i * 2 + 1)" name="PM@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" data-val-required="The Field is required" type="text" value="" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }

                                <span class="field-validation-valid text-danger" data-valmsg-for="PM@(i*2 + 1)" data-valmsg-replace="true"></span>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label class="control-label col-md-2" for="PM@(i*2 + 2)">PM@(i * 2 + 2)</label>
                            <div class="col-md-10" data-toggle="tooltip" data-placement="bottom" title="Exampel: brad@finisar.com:john@finisar.com.....">
                            @if (Model != null && PMList.Count > (i * 2 + 1))
                            {
                                <input class="form-control text-box single-line" value="@(PMList[(i * 2+1)].Name)"  id="PM@(i*2 + 2)" name="PM@(i*2 + 2)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                            }
                            else
                            {
                                <input class="form-control text-box single-line" id="PM@(i*2 + 2)" name="PM@(i*2 + 2)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" type="text" value="" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                            }
                                
                                <span class="field-validation-valid text-danger" data-valmsg-for="PM@(i*2 + 2)" data-valmsg-replace="true"></span>
                            </div>
                        </div>

                        @*<div class="col-md-6">
                            @Html.LabelFor(model => model.PM, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10" data-toggle="tooltip" data-placement="bottom" title="Exampel: brad@finisar.com:john@finisar.com.....">
                                @Html.EditorFor(model => model.PM, new { htmlAttributes = new { @class = "form-control" } }) EMAIL ADDRESS:EMAIL ADDRESS....
                                @Html.ValidationMessageFor(model => model.PM, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    </div>
                    }
                    <hr />

                    @for (var i = 0; i < 3; i++)
                    {
                    <div class="form-group">
                        <div class="col-md-6">
                            <label class="control-label col-md-2" for="Engineer@(i*2 + 1)">Engineer@(i * 2 + 1)</label>
                            <div class="col-md-10" data-toggle="tooltip" data-placement="bottom" title="Exampel: brad@finisar.com:john@finisar.com.....">
                                @if (Model != null && ENGList.Count > (i * 2))
                                {
                                    if (i == 0)
                                    {
                                        <input class="form-control text-box single-line" id="Engineer@(i * 2 + 1)" value="@(ENGList[(i * 2)].Name)" name="Engineer@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" data-val-required="The Field is required" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                    }
                                    else
                                    {
                                        <input class="form-control text-box single-line" id="Engineer@(i * 2 + 1)" value="@(ENGList[(i * 2)].Name)" name="Engineer@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)"  type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                    }
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        <input class="form-control text-box single-line" id="Engineer@(i * 2 + 1)" value="" name="Engineer@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" data-val-required="The Field is required" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                    }
                                    else
                                    {
                                        <input class="form-control text-box single-line" id="Engineer@(i * 2 + 1)" value="" name="Engineer@(i * 2 + 1)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                    }

                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="Engineer@(i*2 + 1)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="control-label col-md-2" for="Engineer@(i*2 + 2)">Engineer@(i*2 + 2)</label>
                            <div class="col-md-10" data-toggle="tooltip" data-placement="bottom" title="Exampel: brad@finisar.com:john@finisar.com.....">
                                @if (Model != null && ENGList.Count > (i * 2 + 1))
                                {
                                    <input class="form-control text-box single-line" id="Engineer@(i*2 + 2)" value="@(ENGList[(i * 2+1)].Name)" name="Engineer@(i*2 + 2)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="Engineer@(i*2 + 2)" value="" name="Engineer@(i*2 + 2)" data-val="true" data-val-regex="The field must match email format" data-val-regex-pattern="^([\w\.\-]+)@@([\w\-]+)((\.(\w){2,3})+)" type="text" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="Engineer@(i*2 + 2)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                    </div>
                    }

                  </div>

                <hr />

                <div class="col-md-12">
                    <div class="form-group">
                        @Html.Label("Description")
                    </div>

                    <div class="form-group">
                        <div>
                            @if (Model != null && !string.IsNullOrEmpty(Model.Description))
                            {
                                 <textarea name="editor1" id="editor1" rows="10" cols="80">@Model.Description</textarea>
                            }
                            else
                            {
                                <textarea name="editor1" id="editor1" rows="10" cols="80"></textarea>
                            }
                            
                            <script>
                            CKEDITOR.replace('editor1', { htmlEncodeOutput: true, filebrowserImageUploadUrl: '/userfiles/Upload.ashx' });
                            </script>
                        </div>
                    </div>

                </div>

            </div>

            <div class="tab-pane" id="tab_b">
                <div class="form-horizontal">

                    <div class="form-group">
                        <div class="col-md-6">
                            <div class="col-md-6">
                                <span class="btn btn-default btn-file" id="choosefile">
                                    Upload MESConfig.ini <input type="file" name="files" id="file1" runat="server" onchange="ShowFileNames(this)" />
                                </span>
                             </div>
                            <div class="col-md-6">
                                @Html.Label("", new { @id = "showfilename", @name = "showfilename", @readonly = "readonly" })
                            </div>
                        </div>
                        <script type="text/javascript">
                            function ShowFileNames(oFile) {
                                $('#showfilename').text(oFile.value);
                                }
                        </script>
                    </div>

                    <hr />

                @for (var i = 0; i < 3; i++)
                {
                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label col-md-2" for="PN@(i*3 + 1)">PN@(i * 3 + 1)</label>
                            <div class="col-md-10">
                                @if (Model != null && Model.PNList.Count > (i * 3))
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 1)" name="PN@(i*3 + 1)" type="text" value="@(Model.PNList[(i * 3)].Pn)" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 1)" name="PN@(i*3 + 1)" type="text" value="" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="PN@(i*3 + 1)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="control-label col-md-2" for="PN@(i*3 + 2)">PN@(i * 3 + 2)</label>
                            <div class="col-md-10">
                                @if (Model != null && Model.PNList.Count > (i * 3 + 1))
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 2)" name="PN@(i*3 + 2)" type="text" value="@(Model.PNList[(i *3+1)].Pn)" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 2)" name="PN@(i*3 + 2)" type="text" value="" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="PN@(i*3 + 2)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="control-label col-md-2" for="PN@(i*3 + 3)">PN@(i * 3 + 3)</label>
                            <div class="col-md-10">
                                @if (Model != null && Model.PNList.Count > (i * 3 + 2))
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 3)" name="PN@(i*3 + 3)" type="text" value="@(Model.PNList[(i * 3+2)].Pn)" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="PN@(i*3 + 3)" name="PN@(i*3 + 3)" type="text" value="" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="PN@(i*3 + 3)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                    </div>
                }

                    <hr />

                @for (var i = 0; i < 3; i++)
                {
                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label col-md-3" for="Station@(i*3 + 1)">STATION@(i * 3 + 1)</label>
                            <div class="col-md-9">
                                @if (Model != null && Model.StationList.Count > (i * 3))
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 1)" name="Station@(i*3 + 1)" type="text" value="@(Model.StationList[(i * 3)].Station)" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 1)" name="Station@(i*3 + 1)" type="text" value="" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="Station@(i*3 + 1)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="control-label col-md-3" for="Station@(i*3 + 2)">STATION@(i * 3 + 2)</label>
                            <div class="col-md-9">
                                @if (Model != null && Model.StationList.Count > (i * 3 + 1))
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 2)" name="Station@(i*3 + 2)" type="text" value="@(Model.StationList[(i * 3+1)].Station)" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 2)" name="Station@(i*3 + 2)" type="text" value="" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="Station@(i*3 + 2)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label class="control-label col-md-3" for="Station@(i*3 + 3)">STATION@(i * 3 + 3)</label>
                            <div class="col-md-9">
                                @if (Model != null && Model.StationList.Count > (i * 3 + 2))
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 3)" name="Station@(i*3 + 3)" type="text" value="@(Model.StationList[(i * 3+2)].Station)" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                else
                                {
                                    <input class="form-control text-box single-line" id="Station@(i*3 + 3)" name="Station@(i*3 + 3)" type="text" value="" data-toggle="tooltip" title="Use spec file's station name" data-val="true" data-val-regex="The field should not contains '" data-val-regex-pattern="^(?!.*\').*$" data-val-length="The field must be a string with a minimum length of 2 and a maximum length of 90." data-val-length-max="90" data-val-length-min="2" />
                                }
                                <span class="field-validation-valid text-danger" data-valmsg-for="Station@(i*3 + 3)" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                    </div>
                }

                    <hr />

                </div>
            </div>
        </div>
    </div>
 
        <div class="form-group">
            <div>
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>

}
